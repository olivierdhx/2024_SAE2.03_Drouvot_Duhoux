@startuml

class Main{
+ main()
+ main(String[])
}

Main ..> Server

class ConfigServ{
- port: String
- link: String
- index: String
- accept: String
- reject: String
- accessLog: String
- errorLog: String
+ ConfigServ(String)
+ getPort(): String
+ getLink(): String
+ getIndex(): String
+ getAccept(): String
+ getReject(): String
+ getAccessLog(): String
+ getErrorLog(): String
}

class Logger{
- accessLog: String
- errorLog: String
+ Logger(String, String)
+ logAccess(String)
+ logError(String)
}

class Server{
- numProcess: String
+ Server(ConfigServ, Logger)
- ecrireNumProcess()
+ start()
}

Server ..> ConnectionHandler
Server "1" --> "1" ConfigServ : - config
Server "*" --> "1" Logger : - logger

class ConnectionHandler{
- clientSocket: Socket
- config: ConfigServ
- logger: Logger
- numProcess: String
+ ConnectionHandler(Socket, ConfigServ, Logger, String)
+ run()
+ ipEstAutorisee(String): boolean
+ gererConnection()
- ecrirePage(PrintWriter, String, String)
- ecrireFichierBinaire(OutputStream, String, File)
+ getContent(String): String
}

ConnectionHandler "1" --> "1" ConfigServ : - config
ConnectionHandler "*" --> "1" Logger : - logger

ConnectionHandler ..> Utils
ConnectionHandler ..> InterpreteurCode

class Utils{
+ calculMemoire(): int
+ calculEspaceDisque(): int
+ ajoutInformationHTML(String, int, int, String): String
}

class InterpreteurCode{
+ presenceCode(String): String
+ executerCode(String, String): String
+ codeExecPython(String, String): String
+ codeExecBash(String, String): String
}

@enduml